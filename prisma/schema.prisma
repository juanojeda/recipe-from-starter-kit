// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  email         String    @unique
  emailVerified DateTime?
  image         String?
  name          String?
  role          Role      @default(USER)
  recipes       Recipe[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ingredient {
  id               String             @id @default(cuid())
  name             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  deletedAt        DateTime?
  recipeIngredient RecipeIngredient[]
}

model RecipeIngredient {
  id              String          @id @default(cuid())
  recipe          Recipe          @relation(fields: [recipeId], references: [id])
  ingredient      Ingredient      @relation(fields: [ingredientId], references: [id])
  measurementQty  Float
  measurementUnit MeasurementUnit @default(GRAM)
  recipeId        String
  ingredientId    String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
  deletedAt       DateTime?

  @@unique([recipeId, ingredientId], name: "recipeIngredientId")
  @@index([ingredientId])
  @@index([recipeId])
}

model Instruction {
  id       String @id @default(cuid())
  order    Int
  text     String
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@unique([recipeId, order], name: "recipeNthInstructionId")
  @@index([recipeId])
}

model Recipe {
  id           String             @id @default(cuid())
  name         String
  cookTimeMins Int? // Currently represents a number of minutes
  prepTimeMins Int? // Currently represents a number of minutes
  ingredients  RecipeIngredient[]
  instructions Instruction[]
  author       User               @relation(fields: [authorId], references: [id])
  authorId     String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now())
  deletedAt    DateTime?

  childRecipes  Recipe[] @relation("ChildParentRecipes")
  parentRecipes Recipe[] @relation("ChildParentRecipes")

  @@unique([name, authorId], name: "recipeByAuthorId")
  @@index([authorId])
}

enum MeasurementUnit {
  UNIT
  CUP
  TBSP
  TSP
  GRAM
  ML
  MM
  PINCH
}

enum Role {
  USER
  ADMIN
}
